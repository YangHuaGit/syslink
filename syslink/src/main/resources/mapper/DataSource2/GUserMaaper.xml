<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.tongyuan.model.daoExtra.GUserMapper">

    <resultMap id="mapResultMap" type="map">
        <id column="id" property="id" jdbcType="BIGINT"  />
        <id column="lower_name" property="lowerName" jdbcType="VARCHAR"  />
        <id column="name" property="name" jdbcType="VARCHAR"  />
        <id column="full_name" property="fullName" jdbcType="VARCHAR"  />
        <id column="email" property="email" jdbcType="VARCHAR"  />
        <id column="passwd" property="passwd" jdbcType="VARCHAR"  />
        <id column="login_type" property="loginType" jdbcType="INTEGER"  />
        <id column="login_source" property="loginSource" jdbcType="BIGINT"  />
        <id column="login_name" property="loginName" jdbcType="VARCHAR"  />
        <id column="type" property="type" jdbcType="INTEGER"  />
        <id column="location" property="location" jdbcType="VARCHAR"  />
        <id column="website" property="website" jdbcType="VARCHAR"  />
        <id column="rands" property="rands" jdbcType="VARCHAR"  />
        <id column="salt" property="salt" jdbcType="VARCHAR"  />
        <id column="created_unix" property="createdUnix" jdbcType="BIGINT"  />
        <id column="updated_unix" property="updatedUnix" jdbcType="BIGINT"  />
        <id column="last_repo_visibility" property="lastRepoVisibility" jdbcType="TINYINT"  />
        <id column="max_repo_creation" property="maxRepoCreation" jdbcType="INTEGER"  />
        <id column="is_active" property="isActive" jdbcType="TINYINT"  />
        <id column="is_admin" property="isAdmin" jdbcType="TINYINT"  />
        <id column="allow_git_hook" property="allowGitHook" jdbcType="TINYINT"  />
        <id column="allow_import_local" property="allowImportLocal" jdbcType="TINYINT"  />
        <id column="prohibit_login" property="prohibitLogin" jdbcType="TINYINT"  />
        <id column="avatar" property="avatar" jdbcType="VARCHAR"  />
        <id column="avatar_email" property="avatarEmail" jdbcType="VARCHAR"  />
        <id column="use_custom_avatar" property="useCustomAvatar" jdbcType="TINYINT"  />
        <id column="num_followers" property="numFollowers" jdbcType="INTEGER"  />
        <id column="num_following" property="numFollowing" jdbcType="INTEGER"  />
        <id column="num_stars" property="numStars" jdbcType="INTEGER"  />
        <id column="num_repos" property="numRepos" jdbcType="INTEGER"  />
        <id column="description" property="description" jdbcType="VARCHAR"  />
        <id column="num_teams" property="numTeams" jdbcType="INTEGER"  />
        <id column="num_members" property="numMembers" jdbcType="INTEGER"  />
    </resultMap>

    <sql id="baseColumnList" >
        id,lower_name,name,full_name,email,passwd,login_type,login_source,login_name,type,location,website,
        rands,salt,created_unix,updated_unix,last_repo_visibility,max_repo_creation,is_active,is_admin,allow_git_hook,
        allow_import_local,prohibit_login,avatar,avatar_email,use_custom_avatar,num_followers,num_following,num_stars,
        num_repos,description,num_teams,num_members
    </sql>
    <sql id="simpleColumnList" >
        id,lower_name,name,full_name,email,location,website,description
    </sql>
    <insert id="add" useGeneratedKeys="true" keyProperty="id"  parameterType="map"   >
        INSERT INTO user (id,lower_name,name,full_name,email,passwd,login_type,login_source,login_name,type,location,website,
        rands,salt,created_unix,updated_unix,last_repo_visibility,max_repo_creation,is_active,is_admin,allow_git_hook,
        allow_import_local,prohibit_login,avatar,avatar_email,use_custom_avatar,num_followers,num_following,num_stars,
        num_repos,description,num_teams,num_members) VALUES
        (#{id}, #{lowerName},#{name},#{fullName},#{email},#{passwd},#{loginType},#{loginSource},#{loginName},#{type},#{location}
        ,#{website},#{rands},#{salt},#{createdUnix},#{updatedUnix},#{lastRepoVisibility},#{maxRepoCreation},#{isActive},#{isAdmin}
        ,#{allowGitHook},#{allowImportLocal},#{prohibitLogin},#{avatar},#{avatarEmail},#{useCustomAvatar},#{numFollowers}
        ,#{numFollowing},#{numStars},#{numRepos},#{description},#{numTeams},#{numMembers})
    </insert>
    <update id="updateUser" parameterType="map">
        UPDATE USER
        <set>
            <if test="name != null">name=#{name},</if>
            <if test="lowerName != null">lower_name=#{lowerName},</if>
            <if test="fullName != null">full_name=#{fullName},</if>
            <if test="email != null">email=#{email},</if>
            <if test="passwd != null">passwd=#{passwd},</if>
            <if test="rands != null">rands=#{rands},</if>
            <if test="salt != null">salt=#{salt},</if>
            <if test="location != null">location=#{location},</if>
            <if test="website != null">website=#{website},</if>
            <if test="updatedUnix!= null">updated_unix=#{updatedUnix},</if>
            <if test="maxRepoCreation!= null">max_repo_creation=#{maxRepoCreation},</if>
            <if test="isActive != null">is_active=#{isActive},</if>
            <if test="isAdmin != null">is_admin=#{isAdmin},</if>
            <if test="allowGitHook != null">allow_git_hook=#{allowGitHook},</if>
            <if test="prohibitLogin != null">prohibit_login=#{prohibitLogin},</if>
        </set>
        WHERE id=#{id}
    </update>



    <update id="updateOrg" parameterType="map">
        UPDATE USER
        <set>
            <if test="name != null">name=#{name},</if>
            <if test="fullName != null">full_name=#{fullName},</if>
            <if test="description != null">description=#{description},</if>
            <if test="website != null">website=#{website},</if>
            <if test="location != null">location=#{location},</if>
            <if test="updatedUnix!= null">updated_unix=#{updatedUnix},</if>
            <if test="maxRepoCreation!= null">max_repo_creation=#{maxRepoCreation},</if>
        </set>
        WHERE id=#{id}
    </update>










    <delete id="delete" parameterType="long">
        delete from user where id=#{id}
    </delete>











    <select id="queryOrg" resultMap="mapResultMap" resultType="map" parameterType="map">
        SELECT
        <include refid="baseColumnList" />
        FROM USER
        WHERE type = 1
        <if test="name !=null and name!=''">
            and name = #{name}
        </if>
    </select>
    <select id="queryUser" resultMap="mapResultMap" resultType="map" parameterType="map">
        SELECT
        <include refid="baseColumnList" />
        FROM USER
        WHERE type = 0
        <if test="name !=null and name!=''">
            and name = #{name}
        </if>
        <if test="email !=null and email!=''">
            and email = #{email}
        </if>
    </select>

    <select id="querySimpleUser" resultMap="mapResultMap" resultType="map" parameterType="long">
        SELECT
        <include refid="simpleColumnList" />
        FROM USER
        WHERE type = 0 and id = #{uid}
    </select>

</mapper>